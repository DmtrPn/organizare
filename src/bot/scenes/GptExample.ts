import { Injectable } from '@nestjs/common';
import { Command, Ctx, Action, Hears, On } from 'nestjs-telegraf';
import { Context, Scenes, Markup } from 'telegraf';

@Injectable()
export class BotService {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    @Command('start')
    async startCommand(@Ctx() ctx: Scenes.SceneContext): Promise<void> {
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data: 'add_reminder' }],
                    [{ text: '–°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É', callback_data: 'create_meeting' }],
                    [{ text: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è', callback_data: 'upcoming_events' }],
                ],
            },
        });
    }

    @On('text')
    public async onText(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply(
            '–ñ–∏–∑–Ω—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞',
            Markup.inlineKeyboard([Markup.button.callback('üå∫–ù–∞—á–∞—Ç—å —Ä–µ—Ç—Ä–∏—Ç', 'startRetreat')]),
        );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    @Action('add_reminder')
    @Hears('üå∫–ù–∞—á–∞—Ç—å —Ä–µ—Ç—Ä–∏—Ç')
    async onAddReminder(@Ctx() ctx: Scenes.SceneContext): Promise<void> {
        await ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì \n–ü—Ä–∏–º–µ—Ä: 01.08.2034',
            Markup.keyboard([['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è']]).resize(),
        );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    @Action('create_meeting')
    async onCreateMeeting(@Ctx() ctx: Scenes.SceneContext): Promise<void> {
        await ctx.scene.enter('createMeetingScene'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
    @Action('upcoming_events')
    async onUpcomingEvents(@Ctx() ctx: Context): Promise<void> {
        await ctx.reply('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:');
        // –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    }
}
